@page "/table"
<h3>AntTableSample</h3>
@using System.ComponentModel
@using AntDesign.TableModels

<Table @ref="table"
       TItem="WeatherForecast"
       DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange"
       Size="TableSize.Small"
       RowKey="x => x.Id"
       ScrollX="1500" ScrollY="300">
    <Selection Key="@(context.Id.ToString())" />

    @foreach (var column in GetSortedColumnConfigs())
    {
        if (column.Visible)
        {
            if (column.InputType == "Switch")
            {

                <PropertyColumn Width="@column.Width" Title="@column.Title" Property="@(c => GetBoolPropertyValue(c, column.PropertyName))" Fixed="@column.Fixed">
                    <Switch Value="@GetBoolPropertyValue((WeatherForecast)context, column.PropertyName)"
                            CheckedChildren="Yes"
                            UnCheckedChildren="No"
                             />

           

                </PropertyColumn>
            }
            else if (column.InputType == "Button")
            {

                <ActionColumn Width="@column.Width" Title="@column.Title" Fixed="@column.Fixed">

                    <Space>
                        <SpaceItem><Button Danger OnClick="@(() => Delete(((WeatherForecast)context).Id))">Delete</Button></SpaceItem>
                    </Space>
                </ActionColumn>
            }
            else if (column.InputType == "Dropdown")
            {
                <PropertyColumn Width="@column.Width" Title="@column.Title" Property="@(c => GetDropDownValue(c, column.PropertyName))" Fixed="@column.Fixed">
                    <Select TItem="DropDownOption"
                            TItemValue="string"
                            DataSource="@(column.Options.Cast<DropDownOption>().ToList())"
                            Value="@GetDropDownValue((WeatherForecast)context, column.PropertyName)"
                            LabelName="@nameof(DropDownOption.Name)"
                            ValueName="@nameof(DropDownOption.Value)"
                            Placeholder="Select a summary"
                            DefaultActiveFirstOption="false"
                            EnableSearch>
                    </Select>
                </PropertyColumn>
            }
            else if (column.InputType == "TextBox")
            {
                <PropertyColumn Width="@column.Width" Title="@column.Title" Property="@(c => GetDropDownValue(c, column.PropertyName))" Fixed="@column.Fixed">
                    <Input Value="@GetDropDownValue((WeatherForecast)context, column.PropertyName)" />
                </PropertyColumn>
            }
            else
            {
                <PropertyColumn Title="@column.Title"
                                Property="@(c => typeof(WeatherForecast).GetProperty(column.PropertyName).GetValue(c))"
                                Format="@column.Format"
                                Width="@column.Width"
                                Sortable="@column.Sortable"
                                Fixed="@column.Fixed">
                </PropertyColumn>
            }
        }
    }
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

<br />
<h5>Selections:</h5>
@if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.Id" Closable OnClose="e => RemoveSelection(selected.Id)">@selected.Id - @selected.Summary1</Tag>
    }
}

<Button OnClick="() => { _pageIndex--; }">Previous page</Button>
<Button OnClick="() => { _pageIndex++; }">Next Page</Button>

@using System.Text.Json;
@code {

    WeatherForecast[] forecasts;

    IEnumerable<WeatherForecast> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    private List<ColumnConfig> columnConfigs = new List<ColumnConfig>
    {
        new ColumnConfig { Title = "Identity", PropertyName = "Id", Sortable = true, Visible = true, Width = "100px", InputType = "TextBox", ColumnIndex = 1  },
        new ColumnConfig { Title = "Date", PropertyName = "Date", Sortable = true, Visible = true, Width = "150px", InputType = "Date", ColumnIndex = 2},
        new ColumnConfig { Title = "Temp. (C)", PropertyName = "TemperatureC", Sortable = true, Visible = true, Width = "100px", InputType = "TextBox", ColumnIndex = 3 },
        new ColumnConfig { Title = "Temp. (F)", PropertyName = "TemperatureF", Sortable = false, Visible = true, Width = "100px",  ColumnIndex = 4 },
        new ColumnConfig { Title = "Hot", PropertyName = "Hot", Sortable = false, Visible = true, Width = "100px", InputType = "Switch", ColumnIndex = 5 },
        new ColumnConfig { Title = "SummaryText", PropertyName = "SummaryText", Sortable = true, Visible = true, Width = "200px", InputType = "TextBox", ColumnIndex = 6},
        new ColumnConfig { Title = "Action", PropertyName = "Action", Sortable = false, Visible = true, Width = "200px", InputType = "Button", ColumnIndex = 10, Fixed = "right" },
        new ColumnConfig { Title = "AreYouReady", PropertyName = "AreYouReady", Sortable = false, Visible = true, Width = "100px", InputType = "Switch", ColumnIndex = 9 },

        new ColumnConfig
        {
            Title = "Summary Dropdown",
            PropertyName = "Summary1",
            Sortable = false,
            Visible = true,
            Width = "300px",
            InputType = "Dropdown",
            ColumnIndex = 7,
            Options = Summaries.Select(s => new DropDownOption { Name = s, Value = s }).ToList()
        },
         new ColumnConfig
        {
            Title = "Summary Dropdown2",
            PropertyName = "Summary1",
            Sortable = false,
            Visible = true,
            Width = "300px",
            InputType = "Dropdown",
            ColumnIndex = 8,
            Options = Summaries2.Select(s => new DropDownOption { Name = s, Value = s }).ToList()
        }

    };
    private string GetDropDownValue(WeatherForecast forecast, string propertyName)
    {
        // Get the property from the WeatherForecast object
        var propertyInfo = typeof(WeatherForecast).GetProperty(propertyName);

        // Return the property's value if it exists
        return propertyInfo != null ? propertyInfo.GetValue(forecast)?.ToString() : null;
    }

    private bool GetBoolPropertyValue(WeatherForecast forecast, string propertyName)
    {
        var propertyInfo = typeof(WeatherForecast).GetProperty(propertyName);
        if (propertyInfo != null)
        {
            var value = propertyInfo.GetValue(forecast);
            if (value != null && propertyInfo.PropertyType == typeof(bool))
            {
                return (bool)value;
            }
        }
        return false; // Default to false if the property is not a boolean or not found
    }


    public class ColumnConfig
    {
        public string Title { get; set; }
        public string PropertyName { get; set; }
        public string Format { get; set; }
        public bool Sortable { get; set; }
        public bool Visible { get; set; }
        public string Width { get; set; }
        public string InputType { get; set; } // e.g., "Switch", "TextBox", "Button"
        public int ColumnIndex { get; set; }
        public List<DropDownOption> Options { get; set; } // Options for Dropdown
        public string Fixed { get; set; }
    }

    public class DropDownOption
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastAsync(1, 50);
        _total = 50;
    }

    public class WeatherForecast
    {
        public int Id { get; set; }

        [DisplayName("Date")]
        public DateTime? Date { get; set; }

        [DisplayName("Temp. (C)")]
        public int TemperatureC { get; set; }

        [DisplayName("Summary1")]
        public string Summary1 { get; set; }
        [DisplayName("Summary2")]
        public string Summary2 { get; set; }
        [DisplayName("SummaryText")]
        public string SummaryText { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public bool Hot { get; set; }
        public bool AreYouReady { get; set; }
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };
    private static readonly string[] Summaries2 = new[]
    {
        "F", "B", "CL", "Co", "M", "ML", "BL", "HT", "SW", "SC"
    };


    public async Task OnChange(QueryModel<WeatherForecast> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
                {
                    Id = index,
                    Date = DateTime.Now.AddDays(index),
                    TemperatureC = temperatureC,
                    Summary1 = Summaries[rng.Next(Summaries.Length)],
                    Hot = temperatureC > 30,
                    Summary2 = Summaries2[rng.Next(Summaries2.Length)],
                    SummaryText = "Summary Text " + index,
                    AreYouReady = rng.Next(2) == 0 ? true : false
                };
        }).ToArray());
    }

    public void RemoveSelection(int id)
    {
        selectedRows = selectedRows.Where(x => x.Id != id);
    }

    private void Delete(int id)
    {
        forecasts = forecasts.Where(x => x.Id != id).ToArray();
        _total = forecasts.Length;
    }

    public List<ColumnConfig> GetSortedColumnConfigs()
    {
        var sortedColumns = columnConfigs.OrderBy(c => c.ColumnIndex).ToList();

        for (int i = 0; i < sortedColumns.Count; i++)
        {
            sortedColumns[i].ColumnIndex = i; // Adjust indices to prevent overlap
        }

        return sortedColumns;
    }
}
